#!/bin/sh

#set -e

Debug ()
{
	for _PARAMETER in ${LIVE_BOOT_CMDLINE}
	do
		case "${_PARAMETER}" in
			live-boot.debug|debug)
				LIVE_BOOT_DEBUG="true"
				;;
		esac
	done

	case "${LIVE_BOOT_DEBUG}" in
		true)
			;;

		*)
			return 0
			;;
	esac

	# Write the trace output
	set -x
}

# Function: live_debug_log
# Description: Logs debug messages to /run/live/boot-live.log and optionally 
# to the kernel log if the message starts with 'live-boot:'.
#
# To keep the log file readable, the indentation level is tracked and applied, 
# therefore when logging inside a function, it is important that both 
# function entry and all exits are marked with BEGIN and END respectively.
#
# Example logging:
#
#  live_debug_log "source-filename.sh: myfunction BEGIN"
#     ...
#     live_debug_log "This is a log message"
#     live_debug_log "live-boot:This is a kernel log message"
#     ...
#  live_debug_log "source-filename.sh: myfunction END"
#
# Parameters:
#   $1: The debug message to log.
# Returns: None
live_debug_log ()
{
	local indentation
	# indent_tracker is defined in 0001-init-vars.sh
	# set the indentation level, one indent is 4 spaces
	case "$1" in
		*BEGIN)
			indentation=$(printf "%$(($indent_tracker * 4))s" "")
			;;
		*END)
			indentation=$(printf "%$((($indent_tracker - 1) * 4))s" "")
			;;
		*)
			indentation=$(printf "%$((($indent_tracker) * 4))s" "")
			;;
	esac

	# if $1 starts with 'live-boot:' then also drop a message to the kernel log
	if echo "$1" | grep -q "^live-boot:"; then
    	echo "<7>live-boot: $1" > /dev/kmsg
		echo "${indentation}${1}" >> /run/live/boot-live.log
	else
    	echo "${indentation}${1}" >> /run/live/boot-live.log	
	fi

	# set the indentation level
	case "${1}" in
		*END)
			indent_tracker=$((indent_tracker-1))
			;;
		*BEGIN)
			indent_tracker=$((indent_tracker+1))
			;;
	esac
}

